dim(TDM)
dim(TDM.common)
library(slam)
TDM.dense <- as.matrix(TDM.common)
TDM.dense
object.size(TDM.common)
object.size(TDM.dense)
library(reshape2)
TDM.dense = melt(TDM.dense, value.name = "count")
head(TDM.dense)
library(ggplot2)
ggplot(TDM.dense, aes(x = Docs, y = Terms, fill = count)) +
geom_tile(colour = "white") +
scale_fill_gradient(high="#FF0000" , low="#FFFFFF")+
ylab("") +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
View(data.frame)
source('~/Desktop/MOOC Work/R Workspace/mysql-read.R')
findAssocs(TDM, "think", 0.8)
TDM.common = removeSparseTerms(TDM, 0.8)
WHERE course_grades.normal_grade > 70
source('~/Desktop/MOOC Work/R Workspace/mysql-read.R')
source('~/.active-rstudio-document')
summary(doc)
doc.corpus <-tm_map(doc, removeWords, stopwords("english")) #removes stopwords
doc.corpus <-tm_map(doc.corpus, stripWhitespace) #removes stopwords
doc.corpus <-tm_map(doc.corpus, tolower)
doc.corpus <-tm_map(doc.corpus, removeNumbers)
doc.corpus <-tm_map(doc.corpus, removePunctuation)
library(SnowballC)
doc.corpus <- tm_map(doc.corpus, stemDocument) #TO STEM OR NOT TO STEM
TDM <- TermDocumentMatrix(doc.corpus)
TDM
inspect(TDM[1:10,1:10])
findFreqTerms(TDM, 40)
findAssocs(TDM, "think", 0.8)
TDM.common = removeSparseTerms(TDM, 0.8)
dim(TDM)
dim(TDM.common)
library(slam)
TDM.dense <- as.matrix(TDM.common)
TDM.dense
object.size(TDM.common)
object.size(TDM.dense)
library(reshape2)
TDM.dense = melt(TDM.dense, value.name = "count")
head(TDM.dense)
library(ggplot2)
ggplot(TDM.dense, aes(x = Docs, y = Terms, fill = count)) +
geom_tile(colour = "white") +
scale_fill_gradient(high="#FF0000" , low="#FFFFFF")+
ylab("") +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
source('~/Desktop/MOOC Work/R Workspace/mysql-read.R')
View(TDM.dense)
View(data.frame)
source('~/.active-rstudio-document')
View(data.frame)
WHERE course_grades.normal_grade = "100"
source('~/Desktop/MOOC Work/R Workspace/mysql-read.R')
source('~/Desktop/MOOC Work/R Workspace/heatmap.R')
source('~/.active-rstudio-document')
library("tm")
doc <- Corpus(VectorSource(data.frame$post_text))
summary(doc)
doc.corpus <-tm_map(doc, removeWords, stopwords("english")) #removes stopwords
doc.corpus <-tm_map(doc.corpus, stripWhitespace) #removes stopwords
doc.corpus <-tm_map(doc.corpus, tolower)
doc.corpus <-tm_map(doc.corpus, removeNumbers)
doc.corpus <-tm_map(doc.corpus, removePunctuation)
library(SnowballC)
doc.corpus <- tm_map(doc.corpus, stemDocument) #TO STEM OR NOT TO STEM
TDM <- TermDocumentMatrix(doc.corpus)
TDM
inspect(TDM[1:10,1:10])
findFreqTerms(TDM, 40)
findAssocs(TDM, "think", 0.9)
TDM.common = removeSparseTerms(TDM, 0.85)
dim(TDM)
dim(TDM.common)
library(slam)
TDM.dense <- as.matrix(TDM.common)
TDM.dense
object.size(TDM.common)
object.size(TDM.dense)
library(reshape2)
TDM.dense = melt(TDM.dense, value.name = "count")
head(TDM.dense)
library(ggplot2)
ggplot(TDM.dense, aes(x = Docs, y = Terms, fill = count)) +
geom_tile(colour = "white") +
scale_fill_gradient(high="#FF0000" , low="#FFFFFF")+
ylab("") +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
airplanfor = c("ed_airplanfor")
airplangen = c("ed_airplangen")
df = data.frame(airplanfor, airplangen)
View(df)
df['1','airplan']
df['1','airplanfor']
df[airplanfor']
''
df['airplanfor']
source('~/Desktop/Ed/EdMOOC-SNA-David/settings.R')
databases = data.frame(airplanfor,airplangen,airplanmap,)
View(databases)
databases = data.frame(airplanfor,airplangen,airplanmap)
View(databases)
View(databases)
nodata <- databases.frame(for= character(0), gen= character(0))
nodata <- databases.frame("for"= character(0), "gen"= character(0))
nodata <- data.frame("for"= character(0), "gen"= character(0))
View(df)
View(nodata)
nodata <- data.frame("for"= character(0), "gen"= character(0), "map"= character(0))
View(nodata)
nodata <- data.frame("forum"= character(0), "gen"= character(0), "map"= character(0))
View(nodata)
nodata <- data.frame("forum"= character(0), "general"= character(0), "hashmap"= character(0))
nodata <- data.frame("forum"= character(0), "general"= character(0), "hashmap"= character(0),airplanfor)
aiplan = c("ed_airplanfor","ed_aiplangen","ed_aiplanmap")
db.frame(aiplan)
db.frame = data.frame(aiplan)
View(db.frame)
rownames(X) <- c("good", "better","super")
rownames(db.frame) <- c("good", "better","super")
View(db.frame)
db.frame[aiplan]
db.frame[aiplan]
db.frame$aiplan
db.frame$aiplan[1]
db.frame = data.frame(aiplan)
View(db.frame)
setwd("~/Desktop/Ed/EdMOOC-SNA-David")
mydata = read.csv("settings/databases.csv")
View(mydata)
settings.databases = read.csv("settings/databases.csv")
settings.databases = read.csv("settings/databases.csv")
rownames(settings.databases) <- settings.databases[,1]
settings.databases[,1] <- NULL
View(settings.databases)
settings.databases
settings.databases[aiplan]
settings.databases[aiplan,forum]
settings.databases["aiplan"]
settings.databases["aiplan""forum"]
settings.databases["aiplan","forum"]
source('~/Desktop/Ed/EdMOOC-SNA-David/load_settings.R')
#Bung your Working directory here
setwd("~/Desktop/Ed/EdMOOC-SNA-David")
#Databases mapping found in settings/databases.csv:
settings.databases = read.csv("settings/databases.csv")
rownames(settings.databases) <- settings.databases[,1]
settings.databases[,1] <- NULL
#Usernames and passwords are in settings/settings.R
source("settings/settings.R"")
""
source('~/Desktop/Ed/EdMOOC-SNA-David/load_settings.R')
settings.databases["aiplan","forum"]
library("RMySQL")
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=settings.databases["aiplan","forum"], host='localhost')
settings.databases["aiplan","forum"]
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=sdb, host='localhost')
library("RMySQL")
db<-settings.databases["aiplan","forum"]
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=sdb, host='localhost')
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=db, host='localhost')
settings.databases = read.csv("settings/databases.csv",stringsAsFactors=FALSE)
rownames(settings.databases) <- settings.databases[,1]
settings.databases[,1] <- NULL
#Usernames and passwords are in settings/settings.R
source("settings/settings.R")
library("RMySQL")
db<-settings.databases["aiplan","forum"]
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=db, host='localhost')
db<-settings.databases["aiplan","forum"]
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=db, host='localhost')
query<-paste('select post_id, `forum_user_id` from `forum_comments`')
results.graph = dbGetQuery(mydb,query)
dbDisconnect(mydb)
dbDisconnect(mydb)
View(results.graph)
source('~/Desktop/Ed/EdMOOC-SNA-David/settings/graphml_generation_tool.R')
View(results.graph)
View(mydata)
M = as.matrix( table(results.graph) )
Mrow = M %*% t(M)
#Mcol = t(M) %*% M
iMrow = graph.adjacency(Mrow, mode = "undirected")
library("igraph")
M = as.matrix( table(results.graph) )
Mrow = M %*% t(M)
#Mcol = t(M) %*% M
iMrow = graph.adjacency(Mrow, mode = "undirected")
E(iMrow)$weight <- count.multiple(iMrow)
iMrow <- simplify(iMrow)
write.graph(iMrow, file="graph.graphml", format="graphml");
creategraphml<-function(x){
topic<-x
}
sapply(settings.databases, function(x) max(as.numeric(x)) )
View(settings.databases)
sapply(settings.databases['forum'], function(x) max(as.numeric(x)) )
sapply(settings.databases[,'forum'], function(x) max(as.numeric(x)) )
sapply(settings.databases, ''forum', creategraphml)
apply(settings.databases, ''forum', creategraphml)
apply(settings.databases, "forum", creategraphml)
creategraphml<-function(x){
topic<-x
}
apply(settings.databases, "forum", creategraphml)
library(plyr)
View(settings.databases)
adply(settings.databases, 1, function (data.frame_in) print(data.frame_in$forum))
adply(settings.databases, 1, function (data.frame_in) print(data.frame_in$forum))
creategraphml<-function(x){
print(x)
}
adply(settings.databases, 1, creategraphml)
creategraphml<-function(x){
print(x$forum)
}
adply(settings.databases, 1, creategraphml)
print(x$forus)
print(x$forum)
creategraphml<-function(x){
print(x$forus)
}
adply(settings.databases, 1, creategraphml)
creategraphml<-function(x){
print(x$forum)
}
creategraphml<-function(x){
print(x$forum)
}
adply(settings.databases, 1, creategraphml)
adply(settings.databases,  creategraphml)
creategraphml<-function(x){
print(x$forum)
}
}
adply(settings.databases, 2 creategraphml)
adply(settings.databases, 1 creategraphml)
adply(settings.databases, 1 creategraphml)
adply(settings.databases, 1 creategraphml)
adply(settings.databases, 2 , creategraphml)
adply(settings.databases, 2 , creategraphml)
View(settings.databases)
creategraphml<-function(x){
db<-x$forum
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=db, host='localhost')
query<-paste('select forum_user_id, post_id from `forum_comments`')
results.graph = dbGetQuery(mydb,query)
dbDisconnect(mydb)
library("igraph")
M = as.matrix( table(results.graph) )
Mrow = M %*% t(M)
#Mcol = t(M) %*% M
iMrow = graph.adjacency(Mrow, mode = "undirected")
E(iMrow)$weight <- count.multiple(iMrow)
iMrow <- simplify(iMrow)
paste("settings/",db<-x$forum, ".graph.ml")
write.graph(iMrow, file="settings/graph.graphml", format="graphml");
}
adply(settings.databases, 2 , creategraphml)
creategraphml<-function(x){
db<-x$forum
print(db)
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=db, host='localhost')
query<-paste('select forum_user_id, post_id from `forum_comments`')
results.graph = dbGetQuery(mydb,query)
dbDisconnect(mydb)
library("igraph")
M = as.matrix( table(results.graph) )
Mrow = M %*% t(M)
#Mcol = t(M) %*% M
iMrow = graph.adjacency(Mrow, mode = "undirected")
E(iMrow)$weight <- count.multiple(iMrow)
iMrow <- simplify(iMrow)
paste("settings/",db<-x$forum, ".graph.ml")
write.graph(iMrow, file="settings/graph.graphml", format="graphml");
}
}
adply(settings.databases, 2 , creategraphml)
creategraphml<-function(x){
db<-x$forum[i]
print(db)
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=db, host='localhost')
adply(settings.databases$forums, 2 , creategraphml)
}
creategraphml<-function(x){
db<-x
print(db)
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=db, host='localhost')
query<-paste('select forum_user_id, post_id from `forum_comments`')
results.graph = dbGetQuery(mydb,query)
dbDisconnect(mydb)
library("igraph")
M = as.matrix( table(results.graph) )
Mrow = M %*% t(M)
#Mcol = t(M) %*% M
iMrow = graph.adjacency(Mrow, mode = "undirected")
E(iMrow)$weight <- count.multiple(iMrow)
iMrow <- simplify(iMrow)
paste("settings/",db<-x$forum, ".graph.ml")
write.graph(iMrow, file="settings/graph.graphml", format="graphml");
}
adply(settings.databases$forums, 2 , creategraphml)
answer<-sapply(settings.databases$forums,  creategraphml)
creategraphml<-function(x){
print("yes")
}
answer<-sapply(settings.databases$forums,  creategraphml)
answer<-sapply(settings.databases$forum,  creategraphml)
print(x
)
creategraphml<-function(x){
print(x )
}
answer<-sapply(settings.databases$forum,  creategraphml)
creategraphml<-function(x){
db<-x
print(db)
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=db, host='localhost')
query<-paste('select forum_user_id, post_id from `forum_comments`')
results.graph = dbGetQuery(mydb,query)
dbDisconnect(mydb)
library("igraph")
M = as.matrix( table(results.graph) )
Mrow = M %*% t(M)
#Mcol = t(M) %*% M
iMrow = graph.adjacency(Mrow, mode = "undirected")
E(iMrow)$weight <- count.multiple(iMrow)
iMrow <- simplify(iMrow)
paste("settings/",db<-x$forum, ".graph.ml")
write.graph(iMrow, file="settings/graph.graphml", format="graphml");
}
answer<-sapply(settings.databases$forum,  creategraphml)
creategraphml<-function(x){
db<-x
print(db)
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=db, host='localhost')
query<-paste('select forum_user_id, post_id from `forum_comments`')
results.graph = dbGetQuery(mydb,query)
dbDisconnect(mydb)
library("igraph")
M = as.matrix( table(results.graph) )
Mrow = M %*% t(M)
#Mcol = t(M) %*% M
iMrow = graph.adjacency(Mrow, mode = "undirected")
E(iMrow)$weight <- count.multiple(iMrow)
iMrow <- simplify(iMrow)
paste("settings/",x, ".graph.ml")
write.graph(iMrow, file="settings/graph.graphml", format="graphml");
}
answer<-sapply(settings.databases$forum,  creategraphml)
source('~/Desktop/Ed/EdMOOC-SNA-David/settings/graphml_generation_tool.R')
fix(creategraphml)
source('~/Desktop/Ed/EdMOOC-SNA-David/settings/graphml_generation_tool.R')
View(settings.databases)
View(settings.databases)
source('~/Desktop/Ed/EdMOOC-SNA-David/graphml_generation_tool.R')
source('~/Desktop/Ed/EdMOOC-SNA-David/graphml_generation_tool.R')
source('~/Desktop/Ed/EdMOOC-SNA-David/graphml_generation_tool.R')
View(mydata)
source('~/Desktop/Ed/EdMOOC-SNA-David/heatmaps_generation_tool.R')
heatplot<- ggplot(TDM.dense, aes(x = Docs, y = Terms, fill = count)) +
geom_tile(colour = "white") +
scale_fill_gradient(high="#FF0000" , low="#FFFFFF")+
ylab("") +
theme(panel.background = element_blank()) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
}
query<-paste('select  post_text from `forum_posts`')
results.text = dbGetQuery(mydb,query)
source('~/Desktop/Ed/EdMOOC-SNA-David/heatmaps_generation_tool.R')
source('~/Desktop/Ed/EdMOOC-SNA-David/heatmaps_generation_tool.R')
source('~/Desktop/Ed/EdMOOC-SNA-David/heatmaps_generation_tool.R')
source('~/Desktop/Ed/EdMOOC-SNA-David/heatmaps_generation_tool.R')
source('~/Desktop/Ed/EdMOOC-SNA-David/heatmaps_generation_tool.R')
fix(iMrow)
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=database.settings["aiplan","forum"], host='localhost')
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.database, dbname=settings.databases["aiplan","forum"], host='localhost')
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.databases, dbname=settings.databases["aiplan","forum"], host='localhost')
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=settings.database["aiplan","forum"], host='localhost')
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=settings.databases["aiplan","forum"], host='localhost')
query<-paste('select forum_user_id, post_id from `forum_comments`')
results.graph = dbGetQuery(mydb,query)
dbDisconnect(mydb)
M = as.matrix( table(results.graph) )
Mrow = M %*% t(M)
#Mcol = t(M) %*% M
iMrow = graph.adjacency(Mrow, mode = "undirected")
E(iMrow)$weight <- count.multiple(iMrow)
iMrow <- simplify(iMrow)
filelocation<-paste("outputs/graphml/",x, ".graphml", sep = "")
fix(iMrow)
iMrow
Mrow
df <- data.frame(
A = c("Berlin", "Amsterdam", "New York") ,
B = c("Munich", "Utrecht", "Chicago"))
View(df)
iMrow
str(iMrow)
clusters(iMrow, mode="weak")
iMrow$layout <- layout.kamada.kawai
V(iMrow)$color <- rainbow(3)[memberships$'Edge betweenness'+1]
plot(iMrow)
g<- iMrow
ebc <- edge.betweenness.community(G)
G<- iMrow
ebc <- edge.betweenness.community(G)
mods <- sapply(0:ecount(G), function(i) {
g2 <- delete.edges(G, ebc$removed.edges[seq(length=i)])
cl <- clusters(g2)$membership
modularity(G, cl)
})
g2 <- delete.edges(G, ebc$removed.edges[1:(which.max(mods)-1)])
memberships$`Edge betweenness` <- clusters(g2)$membership
memberships <- list()
memberships$`Edge betweenness` <- clusters(g2)$membership
fc <- fastgreedy.community(G)
memb <- community.to.membership(G, fc$merges,
steps=which.max(fc$modularity)-1)
memberships$`Fast greedy` <- memb$membership
### leading.eigenvector.community
lec <- leading.eigenvector.community(G)
memberships$`Leading eigenvector` <- lec$membership
### spinglass.community
sc <- spinglass.community(G, spins=10)
memberships$`Spinglass` <- sc$membership
### walktrap.community
wt <- walktrap.community(G, modularity=TRUE)
wmemb <- community.to.membership(G, wt$merges,
steps=which.max(wt$modularity)-1)
memberships$`Walktrap` <- wmemb$membership
### label.propagation.community
memberships$`Label propagation` <- label.propagation.community(G)
iMrow$layout <- layout.kamada.kawai
V(iMrow)$color <- rainbow(3)[memberships$'Edge betweenness'+1]
plot(iMrow)
fix(memberships)
memberships
source("http://bioconductor.org/biocLite.R")
biocLite("GO.db")
BP <- toTable(GOBPPARENTS)
BP <- toTable(GOBPPARENTS)
GOBPARENTS
source("http://bioconductor.org/biocLite.R")
biocLite("GO.db")
library(GO.db)
library(igraph)
BP <- toTable(GOBPPARENTS)
View(BP)
CC <- toTable(GOCCPARENTS)
MF <- toTable(GOMFPARENTS)
View(CC)
View(BP)
library("RMySQL")
library("igraph")
creategraphml<-function(x){
db<-x
print(db)
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=db, host='localhost')
query<-paste('select forum_user_id, post_id from `forum_comments`')
results.graph = dbGetQuery(mydb,query)
dbDisconnect(mydb)
library("igraph")
M = as.matrix( table(results.graph) )
Mrow = M %*% t(M)
#Mcol = t(M) %*% M
iMrow = graph.adjacency(Mrow, mode = "undirected")
E(iMrow)$weight <- count.multiple(iMrow)
iMrow <- simplify(iMrow)
filelocation<-paste("outputs/graphml/",x, ".graphml", sep = "")
write.graph(iMrow, file=filelocation, format="graphml");
}
db<-x
print(db)
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=settings.databases["aiplan","forum"], host='localhost')
source('~/Desktop/Ed/EdMOOC-SNA-David/load_settings.R')
mydb = dbConnect(MySQL(), user=settings.mysqlusername, password=settings.mysqlpassword, dbname=settings.databases["aiplan","forum"], host='localhost')
query<-paste('select forum_user_id, post_id from `forum_comments`')
results.graph = dbGetQuery(mydb,query)
dbDisconnect(mydb)
M = as.matrix( table(results.graph) )
Mrow = M %*% t(M)
#Mcol = t(M) %*% M
iMrow = graph.adjacency(Mrow, mode = "undirected")
betweenness(iMrow)
betweeness_measures<-betweenness(g)
betweeness_measures<-betweenness(iMrow)
fix(betweeness_measures)
sort(betweeness_measures, decreasing = TRUE)
betweeness_measures<-sort(betweenness(iMrow), decreasing = TRUE)
betweeness_measures<-sort(betweenness(iMrow), decreasing = TRUE)
degree_measures<-sort(degree(iMrow), decreasing = TRUE)
fix(degree_measures)
d1 <- split(betweeness_measures, 20))
d1 <- split(betweeness_measures, 20)
fix(`d1`)
d1
bm_top20 <- vals[1:20]
bm_top20 <- betweeness_measures[1:20]
fix(bm_top20)
